#+title: Doom Emacs Config
#+startup: content

* Header
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src


* Appearance
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-ir-black)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src


* Environment Variables and Secrets
** Slack Secrets
#+begin_src emacs-lisp
(defvar work/slack-token
  (string-trim (shell-command-to-string "pass emacs/slack/token"))
  "Slack token loaded from pass.")

(defvar work/slack-cookie
  (string-trim (shell-command-to-string "pass emacs/slack/cookie"))
  "Slack cookie loaded from pass.")
#+end_src


* Org Mode
#+begin_src emacs-lisp :exports none
(after! org
#+end_src
** General Settings
#+begin_src emacs-lisp
(setq
 org-directory "~/org/"
 org-archive-location "~/Documents/repos/archive/global.org_archive::datetree/* From %s")
#+end_src

** Visuals
#+begin_src emacs-lisp
(setq-default
 org-adapt-indentation t
 org-hide-leading-stars t
 org-pretty-entities t
 org-ellipsis " 󱞣"
 org-use-sub-superscripts "{}"
 +org-pretty-mode t)
#+end_src
** Editing
#+begin_src emacs-lisp
(setq org-support-shift-select t)
#+end_src

** Headlines
Next and previous headlines, see https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el
#+begin_src emacs-lisp
(map! :map org-mode-map
      "M-n" #'outline-next-visible-heading
      "M-p" #'outline-previous-visible-heading)
#+end_src
Show headline numbers:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'org-num-mode)
#+end_src

** Tasks
Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t@/!)" "NEXT(n!)" "PROG(p@/!)" "CHCK(c@/!)" "|" "DONE(d@/!)" "KILL(k@/!)" "DELE(D@/!)")
        (sequence "WIP(W@/!)" "WAIT(w@/!)" "INT(i@/!)")))
#+end_src
Priorities
#+begin_src emacs-lisp
(setq org-lowest-priority ?D)
(setq org-default-priority ?D)

(setq org-priority-faces
      '((?A . error)      ;; Highest priority: red, stands out, used for errors
        (?B . warning)    ;; Medium-high: yellow/orange, used for warnings
        (?C . success)    ;; Medium-low: green, used for success/info
        (?D . shadow)))   ;; Lowest: shadow, de-emphasized, greyed out
#+end_src
Enable Org logging options
#+begin_src emacs-lisp
(setq
 ;; Asks a note and a CLOSED: timestamp when moving the task to DONE
 org-log-done 'note
 ;; Asks a note when moving the task
 org-log-refile 'note
 ;; Asks a note when updating the scheduled date
 org-log-reschedule 'note
 ;; Asks a note when updating the deadline
 org-log-redeadline 'note
 ;; Asks a note when clocking out
 org-log-note-clock-out t
 ;; Aggregate all logs into a drawer
 org-log-into-drawer t
 ;; Write the notes in ascending order
 org-log-states-order-reversed nil)
#+end_src

** Roam
*** Settings
#+begin_src emacs-lisp
(after! org-roam
  (setq
   org-roam-directory (file-truename "~/org/")
   org-roam-dailies-directory "dailies/"
   org-roam-db-autosync-mode t))
#+end_src
Capturing
#+begin_src emacs-lisp
(after! org-roam
  ;; TODO: Move the capture templates to external Org files
  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %<%I:%M %p>: %?"
           :target (file+head "%<%Y%m%d>.org"
                              "#+title: %<%Y-%m-%d>\n#+filetags: dailies\n\n")))))
#+end_src

*** Agenda Integration
#+begin_src emacs-lisp
(after! org-roam
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))
  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))
  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files
          (cl-delete-duplicates
           (my/org-roam-list-notes-by-tag "orgagenda")
           :test #'string-equal)))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list))
#+end_src

*** Keybinds
#+begin_src emacs-lisp
(after! org-roam
  (global-set-key (kbd "C-c n l") #'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") #'org-roam-node-find)
  (global-set-key (kbd "C-c n g") #'org-roam-graph)
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
  (global-set-key (kbd "C-c n c") #'org-roam-capture)
  (global-set-key (kbd "C-c n j") #'org-roam-dailies-capture-today)
  (global-set-key (kbd "C-c n a") #'org-roam-alias-add)
  (global-set-key (kbd "C-c n A") #'org-roam-ref-add)
  (global-set-key (kbd "C-c n r") #'my/org-roam-refresh-agenda-list)
  (global-set-key (kbd "C-c n R") #'org-roam-db-sync))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c n n") 'nerd-icons-insert)
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

** Org Modern
Disable things
#+begin_src emacs-lisp
(after! org-modern
  (setq org-modern-checkbox nil
        org-modern-block-name nil
        org-modern-keyword nil))
#+end_src
Improve table
#+begin_src emacs-lisp
(setq
 org-modern-table-horizontal 1
 org-modern-table-vertical 1)
#+end_src
Tasks
#+begin_src emacs-lisp
(setq
 org-modern-priority
 '((?A . "")
   (?B . "")
   (?C . "")
   (?D . ""))
 org-modern-progress 8)
#+end_src

** Prettify Symbols
https://red.artemislena.eu/r/emacs/comments/o04it0/share_your_prettifysymbolsalist/
#+begin_src emacs-lisp
(add-hook
 'org-mode-hook
 (lambda ()
   (setq prettify-symbols-alist
         '(
           ;; Checkboxes
           ("[ ]" . ?)
           ("[X]" . ?)
           ("[x]" . ?)
           ("[-]" . ?)

           ;; Props, metadata and blocks
           ("#+AUTHOR" .          ?)
           ("#+AUTO_TANGLE" .     ?)
           ("#+BEGIN:" .          ?)
           ("#+BEGIN_QUOTE" .     ?)
           ("#+BEGIN_SRC" .       ?)
           ("#+CAPTION:" .        ?󰆆)
           ("#+END:" .            ?󱞿)
           ("#+END_QUOTE" .       ?)
           ("#+END_SRC" .         ?)
           ("#+FILETAGS" .        ?󰓹)
           ("#+HTML_HEAD" .       ?)
           ("#+NAME" .            ?󰫧)
           ("#+OPTIONS" .         ?)
           ("#+PROPERTY" .        ?)
           ("#+RESULTS:" .        ?)
           ("#+STARTUP" .         ?)
           ("#+TITLE" .           ?󰗴)
           ("#+author" .          ?)
           ("#+auto_tangle" .     ?)
           ("#+begin_example" .   ?󰝓)
           ("#+begin_export" .    ?󰛂)
           ("#+begin_quote" .     ?)
           ("#+begin_src" .       ?)
           ("#+end_example" .     ?󰝕)
           ("#+end_export" .      ?󰛁)
           ("#+end_quote" .       ?)
           ("#+end_src" .         ?)
           ("#+filetags" .        ?󰓹)
           ("#+html_head" .       ?)
           ("#+name" .            ?󰫧)
           ("#+options" .         ?)
           ("#+property" .        ?)
           ("#+startup" .         ?)
           ("#+title" .           ?󰗴)
           (":EFFORT:" .          ?󱤥)
           (":END:" .             ?󱞿)
           (":Effort:" .          ?󱤥)
           (":ID:" .              ?󰻾)
           (":LAST_REPEAT:" .     ?)
           (":LOGBOOK:" .         ?󱃕)
           (":NOTER_PAGE:" .      ?󱗖)
           (":PROPERTIES:" .      ?)
           (":REPEAT_TO_STATE:" . ?)
           (":ROAM_ALIASES:" .    ?󰑕)
           (":ROAM_NAME:" .       ?󰗴)
           (":ROAM_REFS:" .       ?)
           (":STYLE:" .           ?)
           (":VISIBILITY:" .      ?)
           ("CLOCK:" .            ?󰥔)
           ("CLOSED:" .           ?)
           ("DEADLINE:" .         ?󰀡)
           ("SCHEDULED:" .        ?󰁫)

           ;; statuses and notes
           ("Note taken on" .  ?󰎜)
           ("       from " .   ?)
           ("\"TODO\"      " . ?)
           ("State \"TODO\"" . ?)
           ("\"DONE\"      " . ?)
           ("State \"DONE\"" . ?)
           ("State \"KILL\"" . ?󰜺)
           ("\"KILL\"      " . ?󰜺)
           ("\"WAIT\"      " . ?)
           ("State \"WAIT\"" . ?)
           ("\"INT\"       " . ?)
           ("State \"INT\" " . ?)
           ("\"NEXT\"      " . ?󰙢)
           ("State \"NEXT\"" . ?󰙢)
           ("\"WIP\"       " . ?󰒡)
           ("State \"WIP\" " . ?󰒡)
           ("\"PROG\"      " . ?)
           ("State \"PROG\"" . ?)
           ("\"DELE\"      " . ?)
           ("State \"DELE\"" . ?)
           ("\"CHCK\"      " . ?󰄭)
           ("State \"CHCK\"" . ?󰄭)
           ("\\\\" .           ?)
           (" \\\\" .          ?)))
   (prettify-symbols-mode)))
#+end_src

** Pomodoro
#+begin_src emacs-lisp
(general-evil-define-key 'normal 'org-mode-map :prefix "SPC" "m c p" 'org-pomodoro)
#+end_src
** Timeline
#+begin_src emacs-lisp
(add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append)
#+end_src

** End of Org Config
#+begin_src emacs-lisp :exports none
) ;; End of (after! org)
#+end_src


* Evil
** Keybinds
#+begin_src emacs-lisp
(after! evil
  (define-key evil-motion-state-map (kbd "C-e") 'doom/forward-to-last-non-comment-or-eol))
#+end_src



* Drag Stuff
https://github.com/doomemacs/doomemacs/commit/816db4a62addf7ac5e658123ba081069d224d310#diff-9cb538cec4592d2ce91c563cca1a9486c13b5af564c30fb9844f8001d61a00d0R593
#+begin_src emacs-lisp
(use-package! drag-stuff
  :defer t
  :init
  (map! "<M-up>"    #'drag-stuff-up
        "<M-down>"  #'drag-stuff-down
        "<M-left>"  #'drag-stuff-left
        "<M-right>" #'drag-stuff-right))
#+end_src


* Fold
#+begin_src emacs-lisp
(evil-define-key* 'motion 'global
  "zv" #'hs-hide-level
  "zf" #'evil-vimish-fold/create
  "zF" #'evil-vimish-fold/create-line
  "zd" #'vimish-fold-delete
  "zA" #'vimish-fold-toggle-all
  "zE" #'vimish-fold-delete-all)
#+end_src


* Search
** Isearch
#+begin_src emacs-lisp
(define-key global-map (kbd "M-s") 'isearch-backward)
#+end_src
As =^S= is the same escape key code for =C-s= and =C-S=, we use =M-s= to search backwards.
#+begin_src emacs-lisp
(after! isearch
  (define-key isearch-mode-map (kbd "M-s") #'isearch-repeat-backward)
  (define-key isearch-mode-map (kbd "M-S") #'isearch-repeat-forward))
#+end_src


* Privacy
** Url Lib
Obfuscate user agent
#+begin_src emacs-lisp
(setq
 url-user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
 url-privacy-level 'high)
#+end_src


* Work
#+begin_src emacs-lisp :exports none
(when (string= (system-name) "work")
#+end_src
** Copilot
#+begin_src emacs-lisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-c M-f" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . 'copilot-clear-overlay)
         ("M-p" . 'copilot-previous-completion)
         ("M-n" . 'copilot-next-completion)
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)
         ("M-f" . 'copilot-accept-completion-by-word)
         ("M-<return>" . 'copilot-accept-completion-by-line))

  :config
  (add-to-list 'copilot-indentation-alist '(prog-mode 2))
  (add-to-list 'copilot-indentation-alist '(org-mode 2))
  (add-to-list 'copilot-indentation-alist '(text-mode 2)))
#+end_src

** Slack Client
#+begin_src emacs-lisp
(use-package! emacs-slack
  :defer nil
  :bind (("C-c S K" . slack-stop)
         ("C-c S c" . slack-select-rooms)
         ("C-c S u" . slack-select-unread-rooms)
         ("C-c S U" . slack-user-select)
         ("C-c S s" . slack-search-from-messages)
         ("C-c S J" . slack-jump-to-browser)
         ("C-c S j" . slack-jump-to-app)
         ("C-c S e" . slack-insert-emoji)
         ("C-c S E" . slack-message-edit)
         ("C-c S r" . slack-message-add-reaction)
         ("C-c S t" . slack-thread-show-or-create)
         ("C-c S g" . slack-message-redisplay)
         ("C-c S G" . slack-conversations-list-update-quick)
         ("C-c S q" . slack-quote-and-reply)
         ("C-c S Q" . slack-quote-and-reply-with-link)
         (:map slack-mode-map
               (("@" . slack-message-embed-mention)
                ("#" . slack-message-embed-channel)))
         (:map slack-thread-message-buffer-mode-map
               (("C-c '" . slack-message-write-another-buffer)
                ("@" . slack-message-embed-mention)
                ("#" . slack-message-embed-channel)))
         (:map slack-message-buffer-mode-map
               (("C-c '" . slack-message-write-another-buffer)))
         (:map slack-message-compose-buffer-mode-map
               (("C-c '" . slack-message-send-from-buffer))))
  :config
  (slack-register-team
   :token work/slack-token
   :cookie work/slack-cookie
   :full-and-display-names t
   :default t
   :subscribed-channels nil))

(use-package! alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+end_src

** End of work config
#+begin_src emacs-lisp :exports none
)
#+end_src


* LSP
#+begin_src emacs-lisp
(general-evil-define-key 'normal 'global :prefix "SPC" "c R" 'lsp-restart-workspace)

(setq
 lsp-modeline-code-actions-enable t
 lsp-modeline-diagnostics-enable t
 lsp-lens-enable t
 lsp-semantic-tokens-enable t
 lsp-headerline-breadcrumb-enable t
 lsp-eslint-format t
 lsp-typescript-format-enable nil
 lsp-javascript-format-enable nil
 lsp-bash-highlight-parsing-errors t)
#+end_src
As the formatting is throwing an error, and [[https://github.com/thisago/lsp-mode/commit/f0fb8f3025c5e208250fe70c41c8aa364823c130][I was not yet able to solve]],
#+begin_example
No catch for tag: --cl-block-nil--, nil
#+end_example

I'll disable LSP for CSS manually (as the [[file:init.el::web]] is configured with ~+lsp~):
#+begin_src emacs-lisp
(remove-hook! 'css-mode-local-vars-hook #'lsp!)
(remove-hook! 'scss-mode-local-vars-hook #'lsp!)
(remove-hook! 'sass-mode-local-vars-hook #'lsp!)
(remove-hook! 'less-css-mode-local-vars-hook #'lsp!)
#+end_src


* EWW
Keybinds
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c e") 'eww)

(after! eww
  (define-key eww-mode-map (kbd "C-c l") 'eww-copy-page-url)
  (define-key eww-mode-map (kbd "C-c r") 'eww-reload)
  (add-hook 'eww-mode-hook 'display-line-numbers-mode))
#+end_src

Default browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

Auto-rename new eww buffers allowing multiple sessions
#+begin_src emacs-lisp
(defun eww-rename-buffer-hook ()
  "Rename eww browser's buffer so sites open in new page."
  (rename-buffer "eww" t))

(after! eww
  (add-hook 'eww-mode-hook #'eww-rename-buffer-hook))
#+end_src


* Spell checking
#+begin_src emacs-lisp
(define-key global-map (kbd "C-c d") 'ispell-change-dictionary)
#+end_src


* Focus Mode
#+begin_src emacs-lisp
(global-set-key (kbd "M-f") #'focus-mode)
#+end_src


* Magit
** Keybinds
Go to file in a new window
#+begin_src emacs-lisp
(after! magit
  (define-key magit-diff-mode-map (kbd "M-RET") 'magit-diff-visit-worktree-file-other-window))
#+end_src
** Diff
[[https://github.com/magit/magit/issues/2942#issuecomment-1026201640][Syntax highlighting]]
#+begin_src emacs-lisp
(use-package! magit-delta
  :after magit
  :config
  (setq
   magit-delta-default-dark-theme "gruvbox-dark"
   magit-delta-default-light-theme "Github"
   magit-delta-hide-plus-minus-markers nil)
  (magit-delta-mode))
#+end_src


* Indent Level
Typescript
#+begin_src emacs-lisp
(setq typescript-indent-level 2)
#+end_src


* Subword Mode
Enable on visual mode and disables it on exit.
#+begin_src emacs-lisp
(add-hook 'evil-insert-state-entry-hook
          (lambda ()
            (subword-mode 1)))
(add-hook 'evil-insert-state-exit-hook
          (lambda ()
            (subword-mode -1)))
#+end_src


* Dape
#+begin_src emacs-lisp
(after! dape
  (setq dape-adapter-dir (concat user-emacs-directory "debug-adapters"))

  (add-to-list 'dape-configs
               `(js-debug-chrome
                 modes (js-mode js-ts-mode)
	         command "node"
                 command-cwd "/home/user/.config/emacs/debug-adapters/js-debug/")
               command-args ("src/dapDebugServer.js" ,(format "%d" dape-configs-port))
               port dape-configs-port
               :type "pwa-chrome"
               :name "Debug react"
               :trace t
               :url ,(lambda ()
                       (read-string "Url: "
                                    "http://localhost:3000"))
               :webRoot dape-cwd-fn
               :outputCapture "console"))
#+end_src


* Apheleia
Enable formatter for SH. See [[https://github.com/radian-software/apheleia//commit/93d2b30dd08c43edde6bdbbd36f42da751bc0975][Do not enable shfmt by default · radian-software/apheleia@93d2b30 · GitHub]]
#+begin_src emacs-lisp
(after! apheleia
  (add-to-list 'apheleia-mode-alist '(sh-mode . shfmt)))
#+end_src


* Flycheck
Next/Previous error
#+begin_src emacs-lisp
(general-evil-define-key 'normal 'prog-mode-map :prefix "[" "e" 'flycheck-previous-error)
(general-evil-define-key 'normal 'prog-mode-map :prefix "]" "e" 'flycheck-next-error)
#+end_src
