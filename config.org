#+title: Emacs Config
#+startup: content

* Appearance
** Theme
#+begin_src emacs-lisp
(setq doom-theme 'doom-ir-black)
#+end_src
** Line Numbers
#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
#+end_src


* Environment Variables and Secrets
** Slack Secrets
#+begin_src emacs-lisp
(defvar my/slack-token
  (string-trim (shell-command-to-string "pass net/slack.com/integratedarts/token"))
  "Slack token loaded from pass.")

(defvar my/slack-cookie
  (string-trim (shell-command-to-string "pass net/slack.com/integratedarts/cookie"))
  "Slack cookie loaded from pass.")
#+end_src


* Org Mode
** General Settings
#+begin_src emacs-lisp
(setq
 org-directory "~/org/"
 org-archive-location "~/Documents/repos/archive/global.org_archive::datetree/* From %s")
#+end_src

** Visuals
#+begin_src emacs-lisp
(after! org-mode
  (setq-default
   org-adapt-indentation t
   org-hide-leading-stars t
   org-pretty-entities t
   org-ellipsis " ó±ž£"
   org-use-sub-superscripts "{}"
   +org-pretty-mode t))
#+end_src
** Editing
#+begin_src emacs-lisp
(setq org-support-shift-select t)
#+end_src

** Headlines
Next and previous headlines, see https://github.com/jethrokuan/dots/blob/master/.doom.d/config.el
#+begin_src emacs-lisp
(after! org-mode
  (map! :map org-mode-map
        "M-n" #'outline-next-visible-heading
        "M-p" #'outline-previous-visible-heading))
#+end_src
Show headline numbers:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'org-num-mode)
#+end_src

** Source Blocks
Disable editing source code in dedicated buffer
#+begin_src emacs-lisp
(defun org-edit-src-code nil)
#+end_src

** Tasks
Keywords
#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t@/!)" "NEXT(n!)" "PROG(p@/!)" "CHCK(c@/!)" "|" "DONE(d@/!)" "KILL(k@/!)" "DELE(D@/!)")
        (sequence "WIP(W@/!)" "WAIT(w@/!)" "INT(i@/!)")))
#+end_src
Priorities
#+begin_src emacs-lisp
(setq org-lowest-priority ?D)
(setq org-default-priority ?D)

(setq org-priority-faces
      '((?A . "red")
        (?B . "darkorange")
        (?C . "yellow")
        (?D . "grey")))
#+end_src

** Roam
*** Settings
#+begin_src emacs-lisp
(after! org-roam
  (setq
   org-roam-directory (file-truename "~/org/")
   org-roam-dailies-directory "braindump/journal/"
   org-roam-db-autosync-mode t))
#+end_src

*** Agenda Integration
#+begin_src emacs-lisp
(after! org-roam
  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))
  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))
  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files
          (cl-delete-duplicates
           (my/org-roam-list-notes-by-tag "orgagenda")
           :test #'string-equal)))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list))
#+end_src

*** Keybinds
#+begin_src emacs-lisp
(after! org-roam
  (global-set-key (kbd "C-c n l") #'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") #'org-roam-node-find)
  (global-set-key (kbd "C-c n g") #'org-roam-graph)
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
  (global-set-key (kbd "C-c n c") #'org-roam-capture)
  (global-set-key (kbd "C-c n j") #'org-roam-dailies-capture-today)
  (global-set-key (kbd "C-c n a") #'org-roam-alias-add)
  (global-set-key (kbd "C-c n A") #'org-roam-ref-add)
  (global-set-key (kbd "C-c n r") #'my/org-roam-refresh-agenda-list)
  (global-set-key (kbd "C-c n R") #'org-roam-db-sync))
#+end_src

** Nerd Icons
#+begin_src emacs-lisp
(after! org-mode
  (define-key org-mode-map (kbd "C-c n n") 'nerd-icons-insert))
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src


* Evil
** Keybinds
#+begin_src emacs-lisp
(after! evil
  (define-key evil-motion-state-map (kbd "C-e") 'doom/forward-to-last-non-comment-or-eol))
#+end_src


* Privacy
** Url Lib
Obfuscate user agent
#+begin_src emacs-lisp
(setq
 url-user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
 url-privacy-level 'high)
#+end_src


* Work
#+begin_src emacs-lisp
(when (string= (system-name) "work")
#+end_src
** Copilot
#+begin_src emacs-lisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (("C-c M-f" . copilot-complete)
         :map copilot-completion-map
         ("C-g" . 'copilot-clear-overlay)
         ("M-p" . 'copilot-previous-completion)
         ("M-n" . 'copilot-next-completion)
         ("<tab>" . 'copilot-accept-completion)
         ("TAB" . 'copilot-accept-completion)
         ("M-f" . 'copilot-accept-completion-by-word)
         ("M-<return>" . 'copilot-accept-completion-by-line))

  :config
  (add-to-list 'copilot-indentation-alist '(prog-mode 2))
  (add-to-list 'copilot-indentation-alist '(org-mode 2))
  (add-to-list 'copilot-indentation-alist '(text-mode 2)))
#+end_src

*** Slack Client
#+begin_src emacs-lisp
(use-package! emacs-slack
  :bind (("C-c S K" . slack-stop)
         ("C-c S c" . slack-select-rooms)
         ("C-c S u" . slack-select-unread-rooms)
         ("C-c S U" . slack-user-select)
         ("C-c S s" . slack-search-from-messages)
         ("C-c S J" . slack-jump-to-browser)
         ("C-c S j" . slack-jump-to-app)
         ("C-c S e" . slack-insert-emoji)
         ("C-c S E" . slack-message-edit)
         ("C-c S r" . slack-message-add-reaction)
         ("C-c S t" . slack-thread-show-or-create)
         ("C-c S g" . slack-message-redisplay)
         ("C-c S G" . slack-conversations-list-update-quick)
         ("C-c S q" . slack-quote-and-reply)
         ("C-c S Q" . slack-quote-and-reply-with-link)
         (:map slack-mode-map
               (("@" . slack-message-embed-mention)
                ("#" . slack-message-embed-channel)))
         (:map slack-thread-message-buffer-mode-map
               (("C-c '" . slack-message-write-another-buffer)
                ("@" . slack-message-embed-mention)
                ("#" . slack-message-embed-channel)))
         (:map slack-message-buffer-mode-map
               (("C-c '" . slack-message-write-another-buffer)))
         (:map slack-message-compose-buffer-mode-map
               (("C-c '" . slack-message-send-from-buffer))))
  :config
  (slack-register-team
   :token my/slack-token
   :cookie my/slack-cookie
   :full-and-display-names t
   :default t
   :subscribed-channels nil))

(use-package! alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))
#+end_src


** End of work config
#+begin_src emacs-lisp :exports none
)
#+end_src
